# -*- coding: utf-8 -*-
"""demo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OjdPuuR06I9VoaylhMrM_ojBzky00U4u
"""

# Import required libraries
from sklearn.multioutput import MultiOutputClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
import numpy as np
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.multioutput import MultiOutputClassifier
from sklearn.naive_bayes import MultinomialNB
import pickle
#convert Excel into pandas dataframe 
df = pd.read_excel('/content/Demo_Training.xlsx')
df.dropna
# to apply tokenization techniques 
def custom_tokenizer(text):
    # split the text and value using regular expression
    import re
    pattern = re.compile(r'[a-zA-Z]+\d+')
    text_and_value = pattern.findall(text)
    return text_and_value
# Apply TF-Vectorization on data 
tfidf_source = TfidfVectorizer()
tfidf_matrix_source = tfidf_source.fit_transform(df['source'].astype(str))

tfidf_nobook_txn_text = TfidfVectorizer(tokenizer=custom_tokenizer)
df['nobook_txn_text'] = df['nobook_txn_text'].astype(str)
tfidf_matrix_nobook_txn_text = tfidf_nobook_txn_text.fit_transform(df['nobook_txn_text'])

tfidf_mode = TfidfVectorizer()
tfidf_matrix_mode = tfidf_mode.fit_transform(df['mode'].astype(str))

tfidf_benef_name = TfidfVectorizer()
tfidf_matrix_benef_name = tfidf_benef_name.fit_transform(df['benef_name'].astype(str))

tfidf_matrix = pd.concat([pd.DataFrame(tfidf_matrix_source.toarray()), 
                          pd.DataFrame(tfidf_matrix_nobook_txn_text.toarray()), 
                          pd.DataFrame(tfidf_matrix_mode.toarray()), 
                          pd.DataFrame(tfidf_matrix_benef_name.toarray())], axis=1)

# Replace nan Values 
cols_to_replace = ['source', 'nobook_txn_text', 'category_level1', 'category_level2','category_level3','mode','benef_name']
df[cols_to_replace] = df[cols_to_replace].fillna('Null')

# Train test splitting 
X_train, X_test, y_train, y_test = train_test_split(tfidf_matrix, 
                                                    df[['category_level1', 'category_level2','category_level3']], 
                                                    test_size=0.2)
# Designing Classifier model 
classifier2 = MultiOutputClassifier(MultinomialNB())

# Fitting train test split data 
classifier2.fit(X_train, y_train)

# Checking accuracy 
accuracy = classifier2.score(X_test, y_test)
print('Accuracy:', accuracy)

# Function to get predictions based on input values
def get_predictions(source, nobook_txn_text, mode, benef_name):
    source_tfidf = tfidf_source.transform([source])
    nobook_txn_text_tfidf = tfidf_nobook_txn_text.transform([nobook_txn_text])
    mode_tfidf = tfidf_mode.transform([mode])
    benef_name_tfidf = tfidf_benef_name.transform([benef_name])
    
    input_tfidf = pd.concat([pd.DataFrame(source_tfidf.toarray()), 
                             pd.DataFrame(nobook_txn_text_tfidf.toarray()), 
                             pd.DataFrame(mode_tfidf.toarray()), 
                             pd.DataFrame(benef_name_tfidf.toarray())], axis=1)
    
    predictions = classifier2.predict(input_tfidf)
    return predictions

# Test the function with sample inputs
source = "SA"
nobook_txn_text = "UPI/307942292301/From:9741154345@ybl/To:credclub@icici/cred"
mode = "UPI"
benef_name = "CRED"
predictions = get_predictions(source, nobook_txn_text, mode, benef_name)
print(predictions)